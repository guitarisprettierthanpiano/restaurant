// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//@version=4
study("STEVEN'S REALITY", overlay = true, precision=2)

len    = input(14,    "K",                                                input.integer, minval = 2)
D      = input(3,     "D",                                                input.integer, minval = 1)
E      = input(       "Forecasted KD", "KD Estimation",                   input.string,  options=["Current Dynamic KD", "Current Static KD","Forecasted KD"])
smooth = input(6,     "Smooth",                                           input.integer, minval = 1)
ures   = input(false,  "Use Multi Time Frame",                             input.bool) 
reso   = input(       "1 day", "  Multi Time Frame Resolution 🕐",        input.string,  options=["5 min", "10 min", "15 min", "30 min", "45 min", "1 hour", "2 hours", "3 hours", "4 hours", "6 hours", "8 hours", "10 hours", "12 hours", "1 day","2 days", "3 days", "1 week", "1 month"])
p      = input(true,  "Show Stoch Cross Value Panel📋",                   input.bool)
bs     = input(true,  "Show OverBought OverSold Panel📜",                input.bool)
BL     = input(       "Bands", "▼▼▼ Overbought Oversold Style ▼▼▼", input.string,  options=["Line Levels", "Bands"])
plb    = input(true, "Plot OverBought Price",                            input.bool)
ob     = input(80,    "  OverBought Level",                               input.float,   minval = 50, maxval = 100)
pls    = input(true, "Plot Oversold Price",                              input.bool)
os     = input(20,    "  OverSold Level",                                 input.float,   minval = 0,  maxval = 50)
sm     = input(false, "======     Stoch Cross Smoothing     ======",      input.bool)
slen   = input(8,     "  Smoothing Length",                               input.integer)
s      = input(false, "Plot Stoch Historical Value",                      input.bool)
sv     = input("K",   "  Stoch Value",                                    input.string,  options=["K", "D"])
Cir    = input(false,  "Plot Crossing Circles🔵",                          input.bool)
ib     = input(true,  "Dark Background ⬛",                              input.bool)
step   = input(true,  "Use Step Lines",                                  input.bool)
dec    = input(4,     "Decimals🔢",                                       input.integer, minval = 0 ,  maxval = 10)

ss(Series, Period) => // Super Smoother Function
    // period = input(8, "Super Smoother Period", input.float, minval=2.0, step=0.5)
    var PI    = 2.0 * asin(1.0)
    var SQRT2 = sqrt(2.0)
    lambda = PI * SQRT2 / Period
    a1     = exp(-lambda)
    coeff2 = 2.0 * a1 * cos(lambda)
    coeff3 = - pow(a1, 2.0)
    coeff1 = 1.0 - coeff2 - coeff3
    filt1  = 0.0
    filt1 := coeff1 * (Series + nz(Series[1])) * 0.5 + coeff2 * nz(filt1[1]) + coeff3 * nz(filt1[2])
    filt1

getRez(intval) =>
    int_1 = iff(intval == "5 min", "5", iff(intval == "10 min", "10", iff(intval == "15 min", "15", iff(intval == "30 min", "30", iff(intval == "45 min", "45", iff(intval == "1 hour", "60", iff(intval == "2 hours", "120", iff(intval == "3 hours", "180", iff(intval == "4 hours", "240", iff(intval == "6 hours", "360", iff(intval == "8 hours", "480", iff(intval == "10 hours", "600", iff(intval == "12 hours", "720", iff(intval == "1 day", "D", iff(intval == "2 days", "2D", iff(intval == "3 days", "3D",iff(intval == "1 week", "W", iff(intval == "1 month", "M","D"))))))))))))))))))
    int_1



res = ures ? getRez(reso) : timeframe.period

f_resInMinutes() => 
    _resInMinutes = timeframe.multiplier * (
      timeframe.isseconds ? 1. / 60             :
      timeframe.isminutes ? 1.                  :
      timeframe.isdaily   ? 60. * 24            :
      timeframe.isweekly  ? 60. * 24 * 7        :
      timeframe.ismonthly ? 60. * 24 * 30.4375  : na)
// ————— Returns the float minutes value of the string _res.
f_tfResInMinutes(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    // Dependency: f_resInMinutes().
    security(syminfo.tickerid, _res, f_resInMinutes())

// —————————— Determine if current timeframe is smaller that higher timeframe selected in Inputs.
// Get higher timeframe in minutes.
higherTfInMinutes = f_tfResInMinutes(res)
// Get current timeframe in minutes.
currentTfInMinutes = f_resInMinutes()
// Compare current TF to higher TF to make sure it is smaller, otherwise our plots don't make sense.
chartOnLowerTf = currentTfInMinutes <= higherTfInMinutes

mtf(data) =>
    chartOnLowerTf ? security(syminfo.tickerid, res, data) : data
    

st(len) => 
    (close - lowest(low,len))/(highest(high,len) - lowest(low,len))

x = stoch(close,high,low,len)*0.01
x2 = sma(x,smooth)
x3 = sma(x2,D)


C(level, len,smooth) =>
    if smooth == 1
        C = (highest(high,len) - lowest(low,len))*level + lowest(low,len)
    else    
        sum = 0.0
        for i = 1 to smooth -1
            sum := x[i] + sum
        a = smooth*level - sum
        C = a * (highest(high,len) - lowest(low,len)) + lowest(low,len)
 
C2(len,smooth) =>
    float sumK  = 0
    for i = 1 to smooth-1
        sumK := sumK + x[i]
    float sumKS = 0
    for i = 1 to D-1
        sumKS := sumKS + x2[i]
    C2 = ((((sumKS*smooth)+sumK-(sumK*D))*(highest(high,len)-lowest(low,len)))/((D-1)))+lowest(low,len)
   

Cf(level, len,smooth) =>
    if smooth == 1
        Cf = (highest(high,len) - lowest(low,len))*level + lowest(low,len)
    else    
        sum = 0.0
        for i = 0 to smooth -2
            sum := x[i] + sum
        a = smooth*level - sum
        Cf = a * (highest(high,len-1) - lowest(low,len-1)) + lowest(low,len-1)
    

stp(len) => 
    (close - lowest(low,len-1))/(highest(high,len-1) - lowest(low,len-1))

kk = stoch(close, high, low, len)*0.01

X = stp(len)
xk = 100* sma(kk,smooth)

k1(len)=>
    sum = 0.0
    for i = 0 to len - 2
        sum := kk[i] +  sum
        mean = (sum + X) /len

X2 = 100*k1(smooth)


d1(len)=>
    sum = 0.0
    for i = 0 to len - 2
        sum := xk[i] + sum
    mean = (sum + X2)/len


x3p = d1(D)*0.01
    


ccks = mtf(ss(C(x3,len,smooth),slen))
cck = mtf(C(x3,len,smooth))
ccks2 = mtf(ss(C2(len,smooth),slen))
cck2 = mtf(C2(len,smooth))
cfks = mtf(ss(Cf(x3p,len,smooth),slen))
cfk = mtf(Cf(x3p,len,smooth))

stochk = mtf(x)
stochks = mtf(x2)
stochd = mtf(x3)
highmtf = mtf(highest(high,len))
lowmtf = mtf(lowest(low,len))

//Highest and Lowest K you can get on current Bar
sumk = 0.0
for i = 1 to smooth -1
    sumk := stochk[i] + sumk
hk = (1+sumk)/smooth
lk = sumk/smooth

//Highest D and Lowest D you can get on current Bar
sumd = 0.0
for i = 1 to D - 1
    sumd := stochks[i] + sumd
hd = (hk+sumd)/D
ld = (lk+sumd)/D



float Cross = na
if (E == "Current Dynamic KD") // Close one day ago
    Cross := sm? ccks : cck
if (E == "Current Static KD")
    Cross := sm ? ccks2 : cck2
if (E == "Forecasted KD")
    Cross := sm ? cfks : cfk


Round( _val, _decimals) => 
    // Rounds _val to _decimals places.
    _p = pow(10,_decimals)
    round(abs(_val)*_p)/_p*sign(_val)


cob = mtf(C(0.01*ob,len,smooth))
fob = mtf(Cf(0.01*ob,len,smooth))

cos = mtf(C(0.01*os,len,smooth))
fos = mtf(Cf(0.01*os,len,smooth))
float obp = na
if (E == "Current Dynamic KD") or (E == "Current Static KD")
    obp := cob
if (E == "Forecasted KD")
    obp := fob
    
float osp = na
if (E == "Current Dynamic KD") or (E == "Current Static KD")
    osp := cos
if (E == "Forecasted KD")
    osp := fos
    


//the actual stoch line color  its red 
Co = close[1] > Cross[1] ? #ff0000 : #ff0000




US = close > Cross and close[1] < Cross[1] ? Cross : na
UD = close < Cross and close[1] > Cross[1] ? Cross : na


linestyle = step ? plot.style_stepline : plot.style_linebr


plot(Cross,         "Stochastic Stop", style= linestyle, linewidth=1, color=Co)
Color = #ff0016
Color1 = #ff0016
style = "•"
size = size.small


//plotchar(Cir?US:na ,"Upcross Stop Start",style ,location.absolute,Color,0,size = size)
//plotchar(Cir?UD:na ,"Upcross Stop Start",style ,location.absolute,Color1,0,size = size)





float ps = na
if (sv == "K")
    ps := mtf(x2)
if (sv == "D")
    ps := mtf(x3)



lable(P, T, s, color_PnL) =>// show_panel
    label PnL_Label = na
    PnL_Label := label.new(bar_index, P, text = T, color=color_PnL, textcolor=color.white, style = s, yloc=yloc.price, xloc=xloc.bar_index,size=size.small)


lable1(P, T, s, color_PnL) =>// show_panel
    label PnL_Label = na
    PnL_Label := label.new(bar_index, P, text = T, color=color_PnL, textcolor=color.white, style = s, yloc=yloc.price, xloc=xloc.bar_index,size=size.normal)
    label.delete(PnL_Label[1])

if (s) and US
    lable(high,+ tostring(Round(ps*100,0)),label.style_label_down,color.new(color.aqua, 50))
    
    
if (s) and UD  
    lable(low,+ tostring(Round(ps*100,0)),label.style_label_up,color.new(color.fuchsia, 50))

    
    
ab =  Cross > close

    
labelstyle = ab ? label.style_label_left : label.style_label_left
//labelstyle = ab ? label.style_label_down : label.style_label_up



lbg = ib ?  color.new(#000000,0) :  color.new(#000000,0)

ud()=>
    if mtf(x3) > mtf(x2)
        "UP: "
    else
        "DOWN: "


bslabel() =>
    bs ? "\n" + "Upper Critical Zone :  " + tostring(Round(obp,dec)) + "\n" + "Lower Critical Zone : " + tostring(Round(osp,dec)): na




float obl = na
if (BL == "Line Levels")
    obl := obp
else
    na
    
float osl = na
if (BL == "Line Levels")
    osl := osp
else
    na

float obb = na
if (BL == "Bands")
    obb := obp
else
    na

float osb = na
if (BL == "Bands")
    osb := osp
else
    na

lb()=>
    float lb = na
    if barstate.islast
        lb := obl
    else
        na

ls()=>
    float ls = na
    if barstate.islast
        ls := osl
    else
        na


tf() =>
    if (not ures) or (not chartOnLowerTf)
        ""

    else
        reso


if (p)        
    lable1(Cross, tf() + "\n" + " Stochastic Cross " + ud() + "" + tostring(Round(Cross,dec)) + bslabel() ,labelstyle,lbg)


plot(plb ? lb() : na, "Overbought Price", color = #00C0FFff,transp = 0, show_last = 1)
plot(pls ? ls() : na, "Oversold Price",   color = #FF0080ff,transp = 0, show_last = 1)

if plb and (BL == "Line Levels")
    B = line.new( nz(bar_index[1],0), obl, bar_index, obl, extend=extend.both, width=1, color=color.new(#00C0FFff,0),style = line.style_dotted)
    line.delete(B[1])

if pls and (BL == "Line Levels")
    S = line.new( nz(bar_index[1],0), osl, bar_index, osl, extend=extend.both, width=1, color=color.new(#FF0080ff,0),style = line.style_dotted)
    line.delete(S[1])

plot(plb ? obb : na, "Overbought Price band", color = #310089)
plot(pls ? osb : na, "Oversold Price band",   color = #310089)



//bollinger bands stuff i added
//@version=4
slength = input(20, minval=1)
src = input(close, title="Source")
mult = input(2.0, minval=0.001, maxval=50, title="StdDev")
basis = sma(src, slength)
dev = mult * stdev(src, slength)
upper = basis + dev
lower = basis - dev
offset = input(0, "Offset", type = input.integer, minval = -500, maxval = 500)
plot(basis, "Basis", color=#ff6d00, linewidth=1, offset = offset)
p1 = plot(upper, "Upper", color=#0033b6, linewidth=1, offset = offset)
p2 = plot(lower, "Lower", color=#0033b6, linewidth=1, offset = offset)
fill(p1, p2, title = "Background", color=color.rgb(0, 0, 0, 99))









//Daily Pivot Points
bool overridesym = input(group="PVSRA", title="Override chart symbol?", defval=false)
string pvsra_sym = input(group="PVSRA", title="Symbol to use for volume candles", type=input.symbol, defval="INDEX:BTCUSD", tooltip="You can use INDEX:BTCUSD or you can combine multiple feeds, for example '(BINANCE:BTCUSDT+COINBASE:BTCUSD)'. Note that adding too many will slow things down.")

//Non repainting security
f_security(_symbol, _res, _src, _repaint) => security(_symbol, _res, _src[_repaint ? 0 : barstate.isrealtime ? 1 : 0])[_repaint ? 0 : barstate.isrealtime ? 0 : 1]

// PVSRA
// From MT4 source:

//   Situation "Climax"
//   Bars with volume >= 200% of the average volume of the 10 previous chart TFs, and bars
//   where the product of candle spread x candle volume is >= the highest for the 10 previous
//   chart time TFs.
//   Default Colors:  Bull bars are green and bear bars are red.

//   Situation "Volume Rising Above Average"
//   Bars with volume >= 150% of the average volume of the 10 previous chart TFs.
//   Default Colors:  Bull bars are blue and bear are blue-violet.

// We want to be able to override where we get the volume data for the candles.


pvsra_security(sresolution,sseries) => security(overridesym ? pvsra_sym : syminfo.tickerid ,sresolution,sseries[barstate.isrealtime?1:0], barmerge.gaps_off,barmerge.lookahead_off)
pvsra_volume = iff(overridesym == true, pvsra_security("",volume), volume)
pvsra_high = iff(overridesym == true, pvsra_security("",high), high)
pvsra_low = iff(overridesym == true, pvsra_security("",low), low)
pvsra_close = iff(overridesym == true, pvsra_security("",close), close)
pvsra_open = iff(overridesym == true, pvsra_security("",open), open)


//label.new(overridesym ? 0 : na, low, text = "PVSRA Override: " + pvsra_sym, xloc = xloc.bar_index, yloc=yloc.belowbar,style=label.style_label_down, size=size.huge)

// The below math matches MT4 PVSRA indicator source
// average volume from last 10 candles
av = iff(overridesym == true,(sum(pvsra_volume,10))/10,(sum(volume,10))/10)
//climax volume on the previous candle
value2 = iff(overridesym == true,pvsra_volume*(pvsra_high-pvsra_low),volume*(high-low))
// highest climax volume of the last 10 candles
hivalue2 = highest(value2,10) 
// VA value determines the bar color. va = 0: normal. va = 1: climax.  va = 2: rising
va = iff(overridesym == true,iff(pvsra_volume >= (av * 2) or value2 >= hivalue2, 1, iff(pvsra_volume >= av * 1.5, 2, 0)),iff(volume >= (av * 2) or value2 >= hivalue2, 1, iff(volume >= av * 1.5, 2, 0)))

// Bullish or bearish coloring
isBull = iff(overridesym == true,pvsra_close > pvsra_open,close > open)

CUColor = #00ff0a // Climax up (bull) bull and bear both start with b so it would be weird hence up down
CDColor = #ff0000 // Climax down (bear)

AUColor = #0088ff //Avobe average up (bull)
ADColor = #da00ff //Above average down (bear))

NUColor = #999999
NDColor = #4d4d4d

// candleColor = iff(climax,iff(isBull,CUColor,CDColor),iff(aboveA,iff(isBull,AUColor,ADColor),iff(isBull,NUColor,NDColor)))
candleColor = iff(isBull,iff(va == 1,CUColor,iff(va == 2,AUColor,NUColor)),iff(va == 1,CDColor,iff(va == 2,ADColor,NDColor)))
barcolor(candleColor) 

alertcondition(va > 0, title="Alert on Vector Candle", message="{{ticker}} Vector Candle on the {{interval}}")



//my moving averages i added
plot(ema(close, 9), color=#00e2ff, linewidth=2, title='9 EMA')
plot(ema(close, 21), color=#ffe500, linewidth=2, title='21 EMA')
plot(ema(close, 50), color=#004000, linewidth=2, title='50 EMA', display=display.none)
plot(ema(close, 55), color=#00ff0a, linewidth=2, title='55 EMA')
plot(ema(close, 200), color=#ffffff, linewidth=2, title='200 EMA')
plot(sma(close, 200), color=#5d606b, linewidth=2, title='200 SMA', display=display.none)
plot(ema(close, 377), color=#5c00ff, linewidth=2, title='377 EMA', display=display.none)
plot(ema(close, 800), color=#ff0088, linewidth=2, title='800 EMA')

